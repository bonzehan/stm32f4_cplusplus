!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AP_HAL_STM32F4	HAL_STM32F4_Class.cpp	/^const HAL_STM32F4 AP_HAL_STM32F4;$/;"	v
AP_HAL_STM32F4_NS	AP_HAL_STM32F4_Namespace.h	/^namespace AP_HAL_STM32F4_NS {$/;"	n
HAL_STM32F4	HAL_STM32F4_Class.cpp	/^HAL_STM32F4::HAL_STM32F4() :$/;"	f	class:HAL_STM32F4
HAL_STM32F4	HAL_STM32F4_Class.h	/^class HAL_STM32F4 : public AP_HAL::HAL {$/;"	c
STM32F4DigitalSource	GPIO.h	/^    STM32F4DigitalSource(uint8_t pin_num) : _pin_num(pin_num)$/;"	f	class:AP_HAL_STM32F4_NS::STM32F4DigitalSource
STM32F4DigitalSource	GPIO.h	/^class AP_HAL_STM32F4_NS::STM32F4DigitalSource : public AP_HAL::DigitalSource {$/;"	c	class:AP_HAL_STM32F4_NS
STM32F4GPIO	GPIO.cpp	/^STM32F4GPIO::STM32F4GPIO()$/;"	f	class:STM32F4GPIO
STM32F4GPIO	GPIO.h	/^class AP_HAL_STM32F4_NS::STM32F4GPIO : public AP_HAL::GPIO {$/;"	c	class:AP_HAL_STM32F4_NS
__AP_HAL_STM32F4_CLASS_H__	HAL_STM32F4_Class.h	2;"	d
__AP_HAL_STM32F4_GPIO_H__	GPIO.h	2;"	d
__AP_HAL_STM32F4_H__	AP_HAL_STM32F4.h	2;"	d
__AP_HAL_STM32F4_NAMESPACE_H__	AP_HAL_STM32F4_Namespace.h	2;"	d
__AP_HAL_STM32F4_PRIVATE_H__	AP_HAL_STM32F4_Private.h	2;"	d
_pin_num	GPIO.h	/^    uint8_t _pin_num;$/;"	m	class:AP_HAL_STM32F4_NS::STM32F4DigitalSource
channel	GPIO.cpp	/^AP_HAL::DigitalSource* STM32F4GPIO::channel(uint16_t n) {$/;"	f	class:STM32F4GPIO
gpioDriver	HAL_STM32F4_Class.cpp	/^static STM32F4GPIO gpioDriver;$/;"	v	file:
init	GPIO.cpp	/^void STM32F4GPIO::init()$/;"	f	class:STM32F4GPIO
init	HAL_STM32F4_Class.cpp	/^void HAL_STM32F4::init(int argc,char* const argv[]) const {$/;"	f	class:HAL_STM32F4
mode	GPIO.cpp	/^void STM32F4DigitalSource::mode(uint8_t output)$/;"	f	class:STM32F4DigitalSource
pinMode	GPIO.cpp	/^void STM32F4GPIO::pinMode(uint8_t pin, uint8_t output)$/;"	f	class:STM32F4GPIO
read	GPIO.cpp	/^uint8_t STM32F4DigitalSource::read() {$/;"	f	class:STM32F4DigitalSource
read	GPIO.cpp	/^uint8_t STM32F4GPIO::read(uint8_t pin) $/;"	f	class:STM32F4GPIO
toggle	GPIO.cpp	/^void STM32F4DigitalSource::toggle() {$/;"	f	class:STM32F4DigitalSource
toggle	GPIO.cpp	/^void STM32F4GPIO::toggle(uint8_t pin)$/;"	f	class:STM32F4GPIO
write	GPIO.cpp	/^void STM32F4DigitalSource::write(uint8_t value) {$/;"	f	class:STM32F4DigitalSource
write	GPIO.cpp	/^void STM32F4GPIO::write(uint8_t pin, uint8_t value)$/;"	f	class:STM32F4GPIO
